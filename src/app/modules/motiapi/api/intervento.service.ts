/*
* SPDX-FileCopyrightText: Copyright 2020 - 2021 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Moti
 * API per il backend della suite di Moti.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Intervento } from '../model/intervento';
import { PagedResponseIntervento } from '../model/pagedResponseIntervento';
import { RicercaIntervento } from '../model/ricercaIntervento';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { InterventoServiceInterface }                            from './intervento.serviceInterface';


@Injectable()
export class InterventoService implements InterventoServiceInterface {

    protected basePath = 'http://localhost:8080/motibe/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Cancella l&#39;intervento per id.
     * @param X_HTTP_Method_Override 
     * @param id L&#39;id dell&#39;intervento.
     * @param intervento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteIntervento(X_HTTP_Method_Override: string, id: number, intervento: Intervento, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public deleteIntervento(X_HTTP_Method_Override: string, id: number, intervento: Intervento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public deleteIntervento(X_HTTP_Method_Override: string, id: number, intervento: Intervento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public deleteIntervento(X_HTTP_Method_Override: string, id: number, intervento: Intervento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (X_HTTP_Method_Override === null || X_HTTP_Method_Override === undefined) {
            throw new Error('Required parameter X_HTTP_Method_Override was null or undefined when calling deleteIntervento.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteIntervento.');
        }
        if (intervento === null || intervento === undefined) {
            throw new Error('Required parameter intervento was null or undefined when calling deleteIntervento.');
        }

        let headers = this.defaultHeaders;
        if (X_HTTP_Method_Override !== undefined && X_HTTP_Method_Override !== null) {
            headers = headers.set('X-HTTP-Method-Override', String(X_HTTP_Method_Override));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/int/intervento/${encodeURIComponent(String(id))}`,
            intervento,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce l&#39;allegato dell&#39;intervento selezionato.
     * @param id intervento
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEsportaIntervento(id: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getEsportaIntervento(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getEsportaIntervento(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getEsportaIntervento(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEsportaIntervento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-excel',
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/int/intervento/esporta/${encodeURIComponent(String(id))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIntervento(id: number, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public getIntervento(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public getIntervento(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public getIntervento(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getIntervento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Intervento>(`${this.basePath}/int/intervento/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param codIntervento codice
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInterventoByCodIntervento(codIntervento: string, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public getInterventoByCodIntervento(codIntervento: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public getInterventoByCodIntervento(codIntervento: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public getInterventoByCodIntervento(codIntervento: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codIntervento === null || codIntervento === undefined) {
            throw new Error('Required parameter codIntervento was null or undefined when calling getInterventoByCodIntervento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Intervento>(`${this.basePath}/int/intervento/codice/${encodeURIComponent(String(codIntervento))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param ricercaIntervento 
     * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
     * @param limit Il numero di record da restituire.
     * @param sort Il campo di sort.
     * @param direction La direzione di sort.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaInterventi(ricercaIntervento: RicercaIntervento, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'body', reportProgress?: boolean): Observable<PagedResponseIntervento>;
    public getRicercaInterventi(ricercaIntervento: RicercaIntervento, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseIntervento>>;
    public getRicercaInterventi(ricercaIntervento: RicercaIntervento, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseIntervento>>;
    public getRicercaInterventi(ricercaIntervento: RicercaIntervento, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ricercaIntervento === null || ricercaIntervento === undefined) {
            throw new Error('Required parameter ricercaIntervento was null or undefined when calling getRicercaInterventi.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResponseIntervento>(`${this.basePath}/int/intervento/ricerca`,
            ricercaIntervento,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce l&#39;allegato degli interventi selezionati.
     * @param pagedResponseIntervento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postEsportaListaInterventi(pagedResponseIntervento: PagedResponseIntervento, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public postEsportaListaInterventi(pagedResponseIntervento: PagedResponseIntervento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public postEsportaListaInterventi(pagedResponseIntervento: PagedResponseIntervento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public postEsportaListaInterventi(pagedResponseIntervento: PagedResponseIntervento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (pagedResponseIntervento === null || pagedResponseIntervento === undefined) {
            throw new Error('Required parameter pagedResponseIntervento was null or undefined when calling postEsportaListaInterventi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-excel',
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/int/intervento/esporta-lista`,
            pagedResponseIntervento,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce l&#39;allegato degli interventi ricercati.
     * @param ricercaIntervento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postEsportaRicercaIntervento(ricercaIntervento: RicercaIntervento, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public postEsportaRicercaIntervento(ricercaIntervento: RicercaIntervento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public postEsportaRicercaIntervento(ricercaIntervento: RicercaIntervento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public postEsportaRicercaIntervento(ricercaIntervento: RicercaIntervento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ricercaIntervento === null || ricercaIntervento === undefined) {
            throw new Error('Required parameter ricercaIntervento was null or undefined when calling postEsportaRicercaIntervento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/vnd.ms-excel',
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/int/intervento/esporta-ricerca`,
            ricercaIntervento,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param intervento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postIntervento(intervento: Intervento, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public postIntervento(intervento: Intervento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public postIntervento(intervento: Intervento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public postIntervento(intervento: Intervento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (intervento === null || intervento === undefined) {
            throw new Error('Required parameter intervento was null or undefined when calling postIntervento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Intervento>(`${this.basePath}/int/intervento`,
            intervento,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param id intervento
     * @param intervento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventoById(id: number, intervento: Intervento, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventoById(id: number, intervento: Intervento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventoById(id: number, intervento: Intervento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventoById(id: number, intervento: Intervento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putInterventoById.');
        }
        if (intervento === null || intervento === undefined) {
            throw new Error('Required parameter intervento was null or undefined when calling putInterventoById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/int/intervento/${encodeURIComponent(String(id))}`,
            intervento,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
