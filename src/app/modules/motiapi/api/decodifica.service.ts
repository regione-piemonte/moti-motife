/*
* SPDX-FileCopyrightText: Copyright 2020 - 2021 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Moti
 * API per il backend della suite di Moti.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Attuatore } from '../model/attuatore';
import { Fase } from '../model/fase';
import { FonteDati } from '../model/fonteDati';
import { FonteFinanziamento } from '../model/fonteFinanziamento';
import { Ruolo } from '../model/ruolo';
import { Settore } from '../model/settore';
import { SituazioneCriticita } from '../model/situazioneCriticita';
import { StatoAttuaz } from '../model/statoAttuaz';
import { TipoCriticita } from '../model/tipoCriticita';
import { Tipologia } from '../model/tipologia';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { DecodificaServiceInterface }                            from './decodifica.serviceInterface';


@Injectable()
export class DecodificaService implements DecodificaServiceInterface {

    protected basePath = 'http://localhost:8080/motibe/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param tipologia tipologia della fase.
     * @param idFonteDati idFonteDati della fase.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFase(tipologia: string, idFonteDati: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Fase>>;
    public getFase(tipologia: string, idFonteDati: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Fase>>>;
    public getFase(tipologia: string, idFonteDati: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Fase>>>;
    public getFase(tipologia: string, idFonteDati: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (tipologia === null || tipologia === undefined) {
            throw new Error('Required parameter tipologia was null or undefined when calling getFase.');
        }
        if (idFonteDati === null || idFonteDati === undefined) {
            throw new Error('Required parameter idFonteDati was null or undefined when calling getFase.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Fase>>(`${this.basePath}/decodifica/fase/${encodeURIComponent(String(tipologia))}/${encodeURIComponent(String(idFonteDati))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFonteDati(observe?: 'body', reportProgress?: boolean): Observable<Array<FonteDati>>;
    public getFonteDati(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FonteDati>>>;
    public getFonteDati(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FonteDati>>>;
    public getFonteDati(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<FonteDati>>(`${this.basePath}/decodifica/fonte-dati`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFonteFinanziamento(observe?: 'body', reportProgress?: boolean): Observable<Array<FonteFinanziamento>>;
    public getFonteFinanziamento(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FonteFinanziamento>>>;
    public getFonteFinanziamento(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FonteFinanziamento>>>;
    public getFonteFinanziamento(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<FonteFinanziamento>>(`${this.basePath}/decodifica/fonte-finanziamento`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRuolo(observe?: 'body', reportProgress?: boolean): Observable<Array<Ruolo>>;
    public getRuolo(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ruolo>>>;
    public getRuolo(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ruolo>>>;
    public getRuolo(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Ruolo>>(`${this.basePath}/decodifica/ruolo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSettore(observe?: 'body', reportProgress?: boolean): Observable<Array<Settore>>;
    public getSettore(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Settore>>>;
    public getSettore(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Settore>>>;
    public getSettore(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Settore>>(`${this.basePath}/decodifica/settore`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSituazioneCriticita(observe?: 'body', reportProgress?: boolean): Observable<Array<SituazioneCriticita>>;
    public getSituazioneCriticita(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SituazioneCriticita>>>;
    public getSituazioneCriticita(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SituazioneCriticita>>>;
    public getSituazioneCriticita(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SituazioneCriticita>>(`${this.basePath}/decodifica/situazione-criticita`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatoAttuaz(observe?: 'body', reportProgress?: boolean): Observable<Array<StatoAttuaz>>;
    public getStatoAttuaz(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatoAttuaz>>>;
    public getStatoAttuaz(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatoAttuaz>>>;
    public getStatoAttuaz(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StatoAttuaz>>(`${this.basePath}/decodifica/stato-attuaz`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoCriticita(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoCriticita>>;
    public getTipoCriticita(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoCriticita>>>;
    public getTipoCriticita(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoCriticita>>>;
    public getTipoCriticita(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoCriticita>>(`${this.basePath}/decodifica/tipo-criticita`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipologia(observe?: 'body', reportProgress?: boolean): Observable<Array<Tipologia>>;
    public getTipologia(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tipologia>>>;
    public getTipologia(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tipologia>>>;
    public getTipologia(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Tipologia>>(`${this.basePath}/decodifica/tipologia`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param attuatore 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAttuatore(attuatore: Attuatore, observe?: 'body', reportProgress?: boolean): Observable<Attuatore>;
    public postAttuatore(attuatore: Attuatore, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Attuatore>>;
    public postAttuatore(attuatore: Attuatore, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Attuatore>>;
    public postAttuatore(attuatore: Attuatore, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (attuatore === null || attuatore === undefined) {
            throw new Error('Required parameter attuatore was null or undefined when calling postAttuatore.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Attuatore>(`${this.basePath}/decodifica/attuatore`,
            attuatore,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce dati registrati su sistema.
     * @param attuatore 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postRicercaAttuatore(attuatore: Attuatore, observe?: 'body', reportProgress?: boolean): Observable<Array<Attuatore>>;
    public postRicercaAttuatore(attuatore: Attuatore, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Attuatore>>>;
    public postRicercaAttuatore(attuatore: Attuatore, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Attuatore>>>;
    public postRicercaAttuatore(attuatore: Attuatore, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (attuatore === null || attuatore === undefined) {
            throw new Error('Required parameter attuatore was null or undefined when calling postRicercaAttuatore.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<Attuatore>>(`${this.basePath}/decodifica/attuatore/ricerca`,
            attuatore,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
